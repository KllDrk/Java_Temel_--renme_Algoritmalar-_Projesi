/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package temelogrenmealgoritmalari;

import java.util.Random;     
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Arrays;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author ahmet
 */
public final class MainFrame extends javax.swing.JFrame {

    public DefaultTableModel modelDataSet,modelClassDataSet,modelClusterDataSet;
    public File file;
    public void CountVisibility(boolean countVisible[]){
        jPanel2.setVisible(countVisible[0]);
        jPanel3.setVisible(countVisible[1]);
        jPanel4.setVisible(countVisible[2]);
    }
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        modelDataSet = (DefaultTableModel) jTable1.getModel();
        jTable1.setModel(modelDataSet);
        modelDataSet.setColumnCount(0);
        
        modelClassDataSet = (DefaultTableModel) jTable2.getModel();
        jTable2.setModel(modelClassDataSet);
        modelClassDataSet.setColumnCount(0);
        
        modelClusterDataSet = (DefaultTableModel) jTable3.getModel();
        jTable3.setModel(modelClusterDataSet);
        modelClusterDataSet.setColumnCount(0);
        
        boolean countVisible[] = {false,false,false};
        CountVisibility(countVisible);
    }

    
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel5 = new javax.swing.JPanel();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jButton5 = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable3 = new javax.swing.JTable();
        jPanel9 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jButton4 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(204, 0, 204));

        jPanel1.setBackground(new java.awt.Color(245, 120, 230));

        jLabel1.setFont(new java.awt.Font("Source Serif Pro Semibold", 1, 36)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Temel Öğrenme Algoritmaları Final Ödevi");

        jPanel5.setBackground(new java.awt.Color(204, 0, 102));

        jButton2.setText("Veri Seti Gizlilik");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setText("Kümelendirme Gizlilik");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton6.setText("Sınıflandırma Gizlilik");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jButton3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 270, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 14, Short.MAX_VALUE)
                .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 920, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPanel2.setBackground(new java.awt.Color(204, 0, 102));

        jButton5.setBackground(new java.awt.Color(255, 98, 252));
        jButton5.setFont(new java.awt.Font("Source Serif Pro Semibold", 1, 18)); // NOI18N
        jButton5.setText("Sınıflandırma");
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jTable3.setBackground(new java.awt.Color(245, 120, 230));
        jTable3.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane3.setViewportView(jTable3);

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel3.setBackground(new java.awt.Color(204, 0, 102));

        jButton1.setBackground(new java.awt.Color(255, 98, 252));
        jButton1.setFont(new java.awt.Font("Source Serif Pro Semibold", 1, 18)); // NOI18N
        jButton1.setText("Veri Setini Gösterme");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jScrollPane1.setBackground(new java.awt.Color(255, 0, 255));

        jTable1.setBackground(new java.awt.Color(245, 120, 230));
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jPanel4.setBackground(new java.awt.Color(204, 0, 102));

        jButton4.setBackground(new java.awt.Color(255, 98, 252));
        jButton4.setFont(new java.awt.Font("Source Serif Pro Semibold", 1, 18)); // NOI18N
        jButton4.setText("Kümelendirme");
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jScrollPane2.setBackground(new java.awt.Color(245, 120, 230));

        jTable2.setBackground(new java.awt.Color(245, 120, 230));
        jTable2.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane2.setViewportView(jTable2);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 590, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        boolean countVisible1[] = {false,true,false};
        CountVisibility(countVisible1);  
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        boolean countVisible1[] = {false,false,true};
        CountVisibility(countVisible1);  
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        boolean countVisible1[] = {true,false,false};
        CountVisibility(countVisible1);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        boolean columnVisible = false;
        modelClassDataSet.setColumnCount(0);
        modelClassDataSet.setRowCount(0);
        String data[] = {};
        File inputFile = new File("./src/Dosya/penguins_size.csv");
        try (Scanner reader = new Scanner(inputFile)) { 
            while(reader.hasNextLine()){
                data = Arrays.copyOf(data,data.length+1);
                data[data.length-1] = reader.nextLine();
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        double dataSetDouble[][] = new double[data.length][7];
        boolean NAdataSetDouble[][] = new boolean[data.length][7];
        System.out.println(data[0]);
        String dataRow[] = null;
        int ClassSize[] = new int[3];
        for (int i = 0;i < data.length;i++) {
            if(data.length - 1 > i){
                dataRow = data[i+1].split(",");
            }
            int max = 6;
            for(int j = 0; j < dataRow.length;j++){
                if(j == 0 || j == 1 || j == max){
                    switch (j) {
                        case 0:
                            switch(dataRow[j]){
                                case "Adelie": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 0; ClassSize[0] ++;break;}
                                case "Chinstrap": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 1;ClassSize[1] ++;break;}
                                case "Gentoo": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 2;ClassSize[2] ++;break;}
                                default:{NAdataSetDouble[i][j] = false;dataSetDouble[i][j] = -1;break;}}   break;
                        case 1:
                            switch(dataRow[j]){
                                case "Torgersen": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 0;break;}
                                case "Biscoe": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 1;break;}
                                case "Dream": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 2;break;}
                                default:{NAdataSetDouble[i][j] = false;dataSetDouble[i][j] = -1;break;}}   break;
                        case 6:
                            switch(dataRow[j]){
                                case "MALE": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 0;break;}
                                case "FEMALE": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 1;break;}
                                default:{NAdataSetDouble[i][j] = false;dataSetDouble[i][j] = -1;break;}}   break;}
                }else{
                    if(!"NA".equals(dataRow[j]) && !".".equals(dataRow[j])){
                        //System.out.println(dataRow[j]);
                        NAdataSetDouble[i][j] = true;
                        dataSetDouble[i][j] = Double.parseDouble(dataRow[j]);
                    }else{
                        //System.out.println(dataRow[j]);
                        NAdataSetDouble[i][j] = true;
                        dataSetDouble[i][j] = -1;
                    }
                }
            }
        }
        
        
        double dataSetDoubleNotClass[][] = new double[data.length][6];
        //System.out.println(dataSetDouble[0].length);
        for (int i = 0;i < dataSetDouble.length;i++) {
            for(int j = 1; j < dataSetDouble[0].length;j++){
                dataSetDoubleNotClass[i][j-1] = dataSetDouble[i][j];
            }
        }
        
        double K_MeansDot[][] = new double[3][6];
        //Math.random()*(max-min+1)+min
        for(int i = 0 ; i < 3 ; i++){
            Random random = new Random();   
            K_MeansDot[i] = dataSetDoubleNotClass[random.nextInt( dataSetDoubleNotClass.length - 1)];
        }
        
        
            //System.out.println(Arrays.toString(K_MeansDot[0]));
            //System.out.println(Arrays.toString(K_MeansDot[1]));
            //System.out.println(Arrays.toString(K_MeansDot[2]));
        /*
        int x[][] = new int[3][6];
        for (int i = 0;i < dataSetDoubleNotClass[0].length;i++) {
            for(int j = 0; j < dataSetDoubleNotClass.length;j++){
                if(NAdataSetDouble[j][i]){
                    if(dataSetDouble[j][0] == 0.0){
                        K_MeansDot[0][i] += dataSetDoubleNotClass[j][i];
                        x[0][i]++;
                    }else if(dataSetDouble[j][0] == 1.0){
                        K_MeansDot[1][i] += dataSetDoubleNotClass[j][i];
                        x[1][i]++;
                    }else if(dataSetDouble[j][0] == 2.0){
                        K_MeansDot[2][i] += dataSetDoubleNotClass[j][i];
                        x[2][i]++;
                    }
                }
            }
            K_MeansDot[0][i] /= x[0][i];
            K_MeansDot[1][i] /= x[1][i];
            K_MeansDot[2][i] /= x[2][i];
        }
        */
        
        
        /*
        int x[] = new int[3];
        for(int j = 0; j < dataSetDoubleNotClass.length;j++){
            for (int i = 0;i < dataSetDoubleNotClass[0].length;i++) {
                if(NAdataSetDouble[j][i]){
                    if(dataSetDouble[j][0] == 0.0 && x[0] < 3){
                        K_MeansDot[0][i] = dataSetDoubleNotClass[j][i];
                        x[0]++;
                    }else if(dataSetDouble[j][0] == 1.0 && x[1] < 3){
                        K_MeansDot[1][i] = dataSetDoubleNotClass[j][i];
                        x[1]++;
                    }else if(dataSetDouble[j][0] == 2.0 && x[2] < 3){
                        K_MeansDot[2][i] = dataSetDoubleNotClass[j][i];
                        x[2]++;
                    }
                }
            }
        }
        */
        System.out.println(Arrays.toString(K_MeansDot[0]));
        System.out.println(Arrays.toString(K_MeansDot[1]));
        System.out.println(Arrays.toString(K_MeansDot[2]));
        
        int iteration = 20;
        double dataSetDoubleNotClassTemp[][] = new double[3][data.length];
        for(int iterationTemp = 0 ; iteration > iterationTemp;iterationTemp++){
            for(int j = 0 ; dataSetDoubleNotClass.length > j ; j++){
                for(int i = 0 ; dataSetDoubleNotClass[0].length > i ; i++){
                    if(dataSetDoubleNotClass[j][i] != -1.0){
                        dataSetDoubleNotClassTemp[0][j] += Math.pow((dataSetDoubleNotClass[j][i] - K_MeansDot[0][i]),2);
                        dataSetDoubleNotClassTemp[1][j] += Math.pow((dataSetDoubleNotClass[j][i] - K_MeansDot[1][i]),2);
                        dataSetDoubleNotClassTemp[2][j] += Math.pow((dataSetDoubleNotClass[j][i] - K_MeansDot[2][i]),2);
                    }else{
                        dataSetDoubleNotClassTemp[0][j] = -1.0;
                        dataSetDoubleNotClassTemp[1][j] = -1.0;
                        dataSetDoubleNotClassTemp[2][j] = -1.0;
                    }  
                    }
                if(dataSetDoubleNotClassTemp[2][j] != -1){
                    dataSetDoubleNotClassTemp[0][j] = Math.sqrt(dataSetDoubleNotClassTemp[0][j]);
                    dataSetDoubleNotClassTemp[1][j] = Math.sqrt(dataSetDoubleNotClassTemp[1][j]);
                    dataSetDoubleNotClassTemp[2][j] = Math.sqrt(dataSetDoubleNotClassTemp[2][j]);
                }else{
                    dataSetDoubleNotClassTemp[0][j] = -1.0;
                    dataSetDoubleNotClassTemp[1][j] = -1.0;
                    dataSetDoubleNotClassTemp[2][j] = -1.0;
                }
            }
            /*
            for(int j = 0 ; dataSetDoubleNotClass.length > j ; j++){
                System.out.print("(" + String.valueOf(j) + ")\t");
                for(int i = 0 ; 3 > i ; i++){
                    System.out.print(dataSetDoubleNotClassTemp[i][j] + "\t");
                }
                System.out.print("\n");
            }
            */
            int minDataSetDoubleNotClassTemp[] = new int[dataSetDoubleNotClassTemp[0].length];
            for(int i = 0 ; dataSetDoubleNotClassTemp[0].length > i ; i++){
                if(dataSetDoubleNotClassTemp[0][i] != -1.0 && dataSetDoubleNotClassTemp[1][i] != -1.0 && dataSetDoubleNotClassTemp[2][i] != -1.0){
                    if(dataSetDoubleNotClassTemp[0][i] >= dataSetDoubleNotClassTemp[1][i]){
                    if(dataSetDoubleNotClassTemp[0][i] >= dataSetDoubleNotClassTemp[2][i]){
                        if(dataSetDoubleNotClassTemp[1][i] >= dataSetDoubleNotClassTemp[2][i]){
                            minDataSetDoubleNotClassTemp[i] = 3;
                        }else{
                            minDataSetDoubleNotClassTemp[i] = 2;
                        }
                    }else{
                        minDataSetDoubleNotClassTemp[i] = 2;
                    }
                }else{
                    if(dataSetDoubleNotClassTemp[1][i] >= dataSetDoubleNotClassTemp[2][i]){
                        if(dataSetDoubleNotClassTemp[0][i] >= dataSetDoubleNotClassTemp[2][i]){
                            minDataSetDoubleNotClassTemp[i] = 3;
                        }else{
                            minDataSetDoubleNotClassTemp[i] = 1;
                        }
                    }else{
                        minDataSetDoubleNotClassTemp[i] = 1;
                    }
                }
                }
                else{
                    minDataSetDoubleNotClassTemp[i] = -1;
                }
                
            }
            //System.out.println(dataSetDoubleNotClassTemp.length );
            /*
            for(int j = 0 ; minDataSetDoubleNotClassTemp.length > j ; j++){
                    System.out.print(minDataSetDoubleNotClassTemp[j] + "\n");
            }
            */ 
            double avgMinDataSetDoubleNotClassTemp[][] = new double[3][6];
            int countAvgMinDataSetDoubleNotClassTemp[][] = new int[3][6];
            /*
            System.out.println("*****************************************************");
            System.out.println(Arrays.toString(K_MeansDot[0]));
            System.out.println(Arrays.toString(K_MeansDot[1]));
            System.out.println(Arrays.toString(K_MeansDot[2]));
            System.out.println("*****************************************************");
            */
            for(int j = 0; j < dataSetDoubleNotClass[0].length; j++){
                for(int i = 0 ; i < minDataSetDoubleNotClassTemp.length; i++){
                    switch(minDataSetDoubleNotClassTemp[i]){
                        case 1:{
                            avgMinDataSetDoubleNotClassTemp[0][j] += dataSetDoubleNotClass[i][j];
                            countAvgMinDataSetDoubleNotClassTemp[0][j]++;
                            break;
                        }
                        case 2:{
                            avgMinDataSetDoubleNotClassTemp[1][j] += dataSetDoubleNotClass[i][j];
                            countAvgMinDataSetDoubleNotClassTemp[1][j]++;
                            break;
                        }
                        case 3:{
                            avgMinDataSetDoubleNotClassTemp[2][j] += dataSetDoubleNotClass[i][j];
                            countAvgMinDataSetDoubleNotClassTemp[2][j]++;
                            break;
                        }
                        default:{
                            break;
                        }
                    } 
                }
                avgMinDataSetDoubleNotClassTemp[0][j] /= countAvgMinDataSetDoubleNotClassTemp[0][j];
                avgMinDataSetDoubleNotClassTemp[1][j] /= countAvgMinDataSetDoubleNotClassTemp[1][j];
                avgMinDataSetDoubleNotClassTemp[2][j] /= countAvgMinDataSetDoubleNotClassTemp[2][j];
                K_MeansDot[0][j] = avgMinDataSetDoubleNotClassTemp[0][j];
                K_MeansDot[1][j] = avgMinDataSetDoubleNotClassTemp[1][j];
                K_MeansDot[2][j] = avgMinDataSetDoubleNotClassTemp[2][j];
            }
            System.out.println("*****************************************************");
            System.out.println(Arrays.toString(K_MeansDot[0]));
            System.out.println(Arrays.toString(K_MeansDot[1]));
            System.out.println(Arrays.toString(K_MeansDot[2]));
            System.out.println("*****************************************************");
        int accuracy = 0, countValue = 0;
        for(int i = 0 ; i < minDataSetDoubleNotClassTemp.length; i++){
            System.out.println("Value index:" + i + "\tValue Real Class:" + dataSetDouble[i][0] + "\tValue Calculated Class:" + Double.valueOf(minDataSetDoubleNotClassTemp[i]-1));
            if(minDataSetDoubleNotClassTemp[i] != -1.0){
                 countValue++;
                 if((dataSetDouble[i][0] ==Double.valueOf(minDataSetDoubleNotClassTemp[i] - 1))) {
                 accuracy++;
            } 
            }
            
               
        }  
        System.out.println("Accuracy:" + (double)accuracy/344 +  "Iterations:" + iterationTemp + "CountValue:" + countValue);
            System.out.println("*****************************************************");    
        }
        
        
        
        
        String dataRow1[] = data[0].split(",");
        for(int i = 0; dataRow1.length > i;i++){modelClassDataSet.addColumn(dataRow1[i]);}
        columnVisible = true;
        for (double[] dataSetDouble1 : dataSetDouble) {
            String dataSetDoubletoString[] = new String[7];
            for(int i = 0 ; i < dataSetDouble1.length;i++){
                dataSetDoubletoString[i] = String.valueOf(dataSetDouble1[i]);
            }
            modelClassDataSet.addRow(dataSetDoubletoString);
        }
        /*
        for (String data1 : data) {
        String dataRow[] = data1.split(",");
        if(!columnVisible){for(int i = 0; dataRow.length > i;i++){modelClassDataSet.addColumn(dataRow[i]);}columnVisible = true;}
        else{modelClassDataSet.addRow(dataRow);}
        }
         */
    }//GEN-LAST:event_jButton4ActionPerformed

    @SuppressWarnings("empty-statement")
    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        boolean columnVisible = false;
        modelClusterDataSet.setColumnCount(0);
        modelClusterDataSet.setRowCount(0);
        String data[] = {};
        File inputFile = new File("./src/Dosya/penguins_size.csv");
        try (Scanner reader = new Scanner(inputFile)) { 
            while(reader.hasNextLine()){
                data = Arrays.copyOf(data,data.length+1);
                data[data.length-1] = reader.nextLine();
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        
        //Verilerin Encode edilmesi
        double dataSetDouble[][] = new double[data.length][7];
        boolean NAdataSetDouble[][] = new boolean[data.length][7];
        System.out.println(data[0]);
        String dataRow[] = null;
        int ClassSize[] = new int[3];
        for (int i = 0;i < data.length;i++) {
            if(data.length - 1 > i){
                dataRow = data[i+1].split(",");
            }
            int max = 6;
            for(int j = 0; j < dataRow.length;j++){
                if(j == 0 || j == 1 || j == max){
                    switch (j) {
                        case 0:
                            switch(dataRow[j]){
                                case "Adelie": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 0; ClassSize[0] ++;break;}
                                case "Chinstrap": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 1;ClassSize[1] ++;break;}
                                case "Gentoo": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 2;ClassSize[2] ++;break;}
                                default:{NAdataSetDouble[i][j] = false;dataSetDouble[i][j] = -1;break;}}   break;
                        case 1:
                            switch(dataRow[j]){
                                case "Torgersen": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 0;break;}
                                case "Biscoe": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 1;break;}
                                case "Dream": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 2;break;}
                                default:{NAdataSetDouble[i][j] = false;dataSetDouble[i][j] = -1;break;}}   break;
                        case 6:
                            switch(dataRow[j]){
                                case "MALE": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 0;break;}
                                case "FEMALE": {NAdataSetDouble[i][j] = true;dataSetDouble[i][j] = 1;break;}
                                default:{NAdataSetDouble[i][j] = false;dataSetDouble[i][j] = -1;break;}}   break;}
                }else{
                    if(!"NA".equals(dataRow[j]) && !".".equals(dataRow[j])){
                        //System.out.println(dataRow[j]);
                        NAdataSetDouble[i][j] = true;
                        dataSetDouble[i][j] = Double.parseDouble(dataRow[j]);
                    }else{
                        //System.out.println(dataRow[j]);
                        NAdataSetDouble[i][j] = true;
                        dataSetDouble[i][j] = -1;
                    }
                }
            }
        }
        
        //egitim ve test veri setine ayrılması
        int trainSize = (int) (ClassSize[0]*0.7) + (int) (ClassSize[1]*0.7) + (int) (ClassSize[2]*0.7);
        int testSize = ((int) ClassSize[0] - (int) (ClassSize[0]*0.7)) + ((int) ClassSize[1] - (int) (ClassSize[1]*0.7)) + ((int) ClassSize[2] - (int) (ClassSize[2]*0.7));
        double dataSetTrain[][] = new double[trainSize][7];
        double dataSetTest[][] = new double[testSize][7];
        int exClassSize = 0, trainClassSize = 0, testClassSize = 0;
        for(int k = 0; k < 3; k++ ){
            for(int i = 0 ; i < (int) (ClassSize[k]*0.7); i++){
                System.arraycopy(dataSetDouble[i + exClassSize], 0, dataSetTrain[i + trainClassSize], 0, 7);
            }
            exClassSize += ClassSize[k];
            trainClassSize += (int) (ClassSize[k]*0.7);
        }
        exClassSize = 0;
        for(int k = 0; k < 3; k++ ){
            for(int i = 0 ; i < ((int) ClassSize[k] - (int) (ClassSize[k]*0.7)); i++){
                System.arraycopy(dataSetDouble[i + exClassSize], 0, dataSetTest[i + testClassSize], 0, 7);
            }
            exClassSize += ClassSize[k];
            testClassSize += ((int) ClassSize[k] - (int) (ClassSize[k]*0.7));
        }
        /*
        System.out.println("trainSize:" + trainSize + "\tdataSetTrainSize:" + dataSetTrain.length);
        for(int i = 0; i < trainSize ; i++){
            System.out.println("dataSetTrain:" + dataSetTrain[i][0]);
        }
        System.out.println("***********************************************************");
        System.out.println("testSize:" + testSize + "\tdataSetTestSize:" + dataSetTest.length);
        for(int i = 0; i < testSize ; i++){
            System.out.println("dataSetTest:" + dataSetTest[i][0]);
        }
        */
        //KNN algoritması uygulanacak.
        //ilk önce test veri setleri ile eğitim veri setleri üzerinde gezinme yapacağız. Bu gezinme sonucu çıkan değerler selection sort ile sıralanaıp en yakın değerlere göre değeri
        //belirlenecek.
        //k değeri 3 ten 11 e kadar tek sayılar olacak şekilde ilerleyip test edilecek
        int totalAcc = 0, totalLoss = 0;
        int matrixConfusion[][] = new int[3][3];
        for(int KNNSize = 5; KNNSize <= 5; KNNSize++){
            double euclideanLenght[][] = new double[testSize][trainSize];
            double euclideanLenghtCopy[][] = new double[testSize][trainSize];
            int euclideanIndex[][] = new int[testSize][trainSize];
            for(int i = 0; i <testSize;i++){
                for(int j = 0; j < trainSize;j++) {
                    for(int k = 0; k < 7 ;k++){
                        euclideanLenght[i][j] += Math.pow((dataSetTrain[j][k] - dataSetTest[i][k]), 2);
                    }
                    euclideanLenght[i][j] = Math.sqrt(euclideanLenght[i][j]);
                    euclideanLenghtCopy[i][j] = euclideanLenght[i][j];
                }
            }
            int trueAcc = 0, falseAcc = 0;
            for(int k = 0; k < testSize; k++){
                //System.out.println("***********************************************************");
                for (int i = 0; i < trainSize - 1; i++){  
                        int index = i;  
                        for (int j = i + 1; j < trainSize; j++){  
                            if ((double) -1.0 != euclideanLenghtCopy[k][j] && euclideanLenghtCopy[k][j] < euclideanLenghtCopy[k][index]){  
                                index = j;//searching for lowest index 
                                euclideanIndex[k][i] = j;
                            }  
                        }  
                        
                        double smallerNumber = euclideanLenghtCopy[k][index];   
                        euclideanLenghtCopy[k][index] = euclideanLenghtCopy[k][i];  
                        euclideanLenghtCopy[k][i] = smallerNumber;
                        /*
                            System.out.println( "Real Index:" + i +
                                            "\tindex: " + euclideanIndex[k][i] + 
                                            "\teuclideanLenght: " + euclideanLenght[k][i] + 
                                            "\teuclideanLenghtCopy:" +euclideanLenghtCopy[k][i] +
                                            "\tTrain Class:" + dataSetTrain[euclideanIndex[k][i]][0] +
                                            "\tTest Class:" + dataSetTest[k][0]);
                        */
                    } 
                
                //System.out.println("***********************************************************");
                System.out.println("***********************************************************");
                    trueAcc = 0;
                    falseAcc = 0;
                    int euclideanClassSize[] = new int[3];
                    double maxNum = euclideanClassSize[0];
                    double maxClass = 0;
                    for(int kSize = 0; kSize < KNNSize; kSize++){
                            if(dataSetTrain[euclideanIndex[k][kSize]][0] == (double) 0.0){
                                euclideanClassSize[0]++;
                            }else if(dataSetTrain[euclideanIndex[k][kSize]][0] == (double) 1.0){
                                euclideanClassSize[1]++;
                            }else if(dataSetTrain[euclideanIndex[k][kSize]][0] == (double) 2.0){
                                euclideanClassSize[2]++;
                            }
                        
                        for (int j = 0 ; j < euclideanClassSize.length; j++) {
                            if (euclideanClassSize[j] > maxNum){
                                maxNum = j;
                                maxClass = (double) j;
                            }
                        }
                        //[(int) dataSetTest[k][0]]
                        /*
                        System.out.println( "Real Index:" + kSize +
                                            "\tindex: " + euclideanIndex[k][kSize] + 
                                            "\teuclideanLenght: " + euclideanLenght[k][kSize] + 
                                            "\teuclideanLenghtCopy:" +euclideanLenghtCopy[k][kSize] +
                                            "\tTrain Class:" + dataSetTrain[euclideanIndex[k][kSize]][0] +
                                            "\tTest Class:" + dataSetTest[k][0]);
                        */
                }
                matrixConfusion[(int) dataSetTest[k][0]][(int) maxClass] ++;
                for(int x  =  0 ; x < 3 ; x ++){
                    for(int y  = 0 ; y < 3 ; y++){
                        System.out.print(matrixConfusion[x][y] + "\t");
                    }
                    System.out.println();
                }
                System.out.println("***********************************************************");
            }
        }
        System.out.println("TotalAcc:" + (double)totalAcc/testSize + "\tTotalLoss:" + (double)totalLoss/testSize);
        double precision[] = new double[3];
        double reCall[] = new double[3];
        double fScore[] = new double[3];
        double totalAccuracy = 0;
        for(int i = 0 ; i < 3 ; i++){
            precision[i] =  (double)matrixConfusion[i][i]/(double)(matrixConfusion[i][0] + matrixConfusion[i][1] + matrixConfusion[i][2]);
            reCall[i] =  (double)matrixConfusion[i][i]/(double)(matrixConfusion[0][i] + matrixConfusion[0][i] + matrixConfusion[0][i]);
            fScore[i] = 2 * ((precision[i] * reCall[i])/(precision[i] + reCall[i]));
            totalAccuracy += (double)matrixConfusion[i][i];
            System.out.println("precision:" + precision[i] + "\treCall:" + reCall[i] + "\tfScore:" + fScore[i]);
        }
        totalAccuracy /= (double) 105;
        System.out.println("totalAccuracy:" + totalAccuracy);
        
        String dataRow1[] = data[0].split(",");
        for(int i = 0; dataRow1.length > i;i++){modelClusterDataSet.addColumn(dataRow1[i]);}
        columnVisible = true;
        for (double[] dataSetDouble1 : dataSetDouble) {
            String dataSetDoubletoString[] = new String[7];
            for(int i = 0 ; i < dataSetDouble1.length;i++){
                dataSetDoubletoString[i] = String.valueOf(dataSetDouble1[i]);
            }
            modelClusterDataSet.addRow(dataSetDoubletoString);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        //species,island,culmen_length_mm,culmen_depth_mm,flipper_length_mm,body_mass_g,sex
        boolean columnVisible = false;
        modelDataSet.setColumnCount(0);
        modelDataSet.setRowCount(0);
        File inputFile = new File("./src/Dosya/penguins_size.csv");
        try (Scanner reader = new Scanner(inputFile)) {
            while(reader.hasNextLine()){
                String data = reader.nextLine();
                String dataRow[] = data.split(",");
                if(!columnVisible){for(int i = 0; dataRow.length > i;i++){modelDataSet.addColumn(dataRow[i]);}columnVisible = true;}
                else{modelDataSet.addRow(dataRow);}
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(MainFrame.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new MainFrame().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    private javax.swing.JTable jTable3;
    // End of variables declaration//GEN-END:variables
}
